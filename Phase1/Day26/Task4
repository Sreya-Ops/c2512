// 3. dynamic array 

#include <iostream>
#include <stdexcept>
#include <vector>

using namespace std;

class StackOverflowException : public exception {
public:
    const char* what() const noexcept override {
        return "Error: Stack Overflow";
    }
};

class StackUnderflowException : public exception {
public:
    const char* what() const noexcept override {
        return "Error: Stack Underflow";
    }
};

template <typename T>
class C2512Stack {
private:
    vector<T> arr;   // Vector to store stack elements
    int _size;       // Maximum size of the stack

public:
    C2512Stack(int size) : _size(size) {
    }

    void push(T data) {
        try {
            if (arr.size() >= _size) {
                throw StackOverflowException();
            } else {
                arr.push_back(data);
            }
        }
        catch (const StackOverflowException& e) {
            cout << e.what() << endl;
        }
    }

    void pop() {
        try {
            if (arr.size() <= 0 ) {
                throw StackUnderflowException();
            } else {
                cout << "Popped: " << arr.back() << endl;
                arr.pop_back();
            }
        }
        catch (const StackUnderflowException& e) {
            cout << e.what() << endl;
        }
    }

    void top() const {
        if (arr.size() <= 0) {
            cout << "Error: Stack is empty" << endl;
        } else {
            cout << "Top: " << arr.back() << endl;
        }
    }
};

// Driver code
int main() {
    // Create stack for double type with size 3
    C2512Stack<double> stack(3);

    stack.push(10.0);
    stack.push(12.0);
    stack.push(11.0);

    stack.push(17.0);
    // Displaying the top element and popping it
    stack.top();  // Top: 11.0
    stack.pop();  // Popped: 11.0
    stack.top();  // Top: 12.0
    stack.pop();  // Popped: 12.0
    stack.top();  // Top: 10.0
    stack.pop();  // Popped: 10.0
    stack.pop();  // Error: Stack Underflow
    stack.top();  // Error: Stack is empty

    // Create stack for int type with size 3
    C2512Stack<int> intStack(3);

    intStack.push(1);
    intStack.push(2);
    intStack.push(3);

    intStack.push(4);

    // Displaying the top element and popping it
    intStack.top();  // Top: 3
    intStack.pop();  // Popped: 3
    intStack.top();  // Top: 2
    intStack.pop();  // Popped: 2
    intStack.top();  // Top: 1
    intStack.pop();  // Popped: 1
    intStack.pop();  // Error: Stack Underflow
    intStack.top();  // Error: Stack is empty

    return 0;
}
